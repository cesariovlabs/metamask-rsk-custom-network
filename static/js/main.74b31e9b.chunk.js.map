{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","chainId","setChainId","log","setLog","networkName","addNetwork","params","window","ethereum","request","method","then","chainName","parseInt","catch","error","message","addToken","className","onClick","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","type","options","address","image","map","item","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAqHeA,MAhHf,WAAiB,IAAD,EACgBC,mBAAwB,MADxC,mBACPC,EADO,KACEC,EADF,OAEQF,mBAAmB,IAF3B,mBAEPG,EAFO,KAEFC,EAFE,KAIRC,EAA0B,KAAZJ,EAAiB,UAAY,UAE3CK,EAAa,SAACC,GAAD,OACjBC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,0BAA2BJ,WAC1DK,MAAK,WACJR,EAAO,GAAD,mBAAKD,GAAL,uBAAyBI,EAAO,GAAGM,UAAnC,aAAiDC,SAASP,EAAO,GAAGN,SAApE,QACNC,EAAWY,SAASP,EAAO,GAAGN,aAE/Bc,OAAM,SAACC,GAAD,OAAkBZ,EAAO,GAAD,mBAAKD,GAAL,kBAAoBa,EAAMC,gBAgCvDC,EAAW,SAACX,GAAD,OACfC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,oBAAqBJ,WACpDK,MAAK,kBAAMR,EAAO,GAAD,mBAAKD,GAAL,CAAU,8BAC3BY,OAAM,SAACC,GAAD,OAAkBZ,EAAO,GAAD,mBAAKD,GAAL,kBAAoBa,EAAMC,gBAwB7D,OACE,sBAAKE,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,sDAIClB,GACC,oCACE,iDACA,8BAAG,6CAAH,IAA6BA,KAC7B,8BAAG,0CAAH,IAA0BI,QAI9B,oCACE,yCACA,qJAEA,wBAAQe,QA5DQ,kBACpBd,EAAW,CACT,CACEL,QAAS,OACTY,UAAW,cACXQ,eAAgB,CACdC,KAAM,UACNC,OAAQ,OACRC,SAAU,IAEZC,QAAS,CAAC,8BACVC,kBAAmB,CAAC,+BAiDpB,6BACA,wBAAQN,QA5EQ,kBACpBd,EAAW,CACT,CACEL,QAAS,OACTY,UAAW,cACXQ,eAAgB,CACdC,KAAM,eACNC,OAAQ,QACRC,SAAU,IAEZC,QAAS,CAAC,sCACVC,kBAAmB,CAAC,uCAiEpB,gCAGDzB,GACC,oCACE,yCACA,mDACA,wDAA0B,iCAASI,IAAnC,iBACA,wBAAQe,QAAqB,KAAZnB,EAjDL,kBAClBiB,EAAS,CACPS,KAAM,QACNC,QAAS,CACPC,QAAS,6CACTN,OAAQ,MACRC,SAAU,GACVM,MAAO,mEAIc,kBACzBZ,EAAS,CACPS,KAAM,QACNC,QAAS,CACPC,QAAS,6CACTN,OAAQ,OACRC,SAAU,GACVM,MAAO,mEA+BL,8BAIJ,oCACE,qCACA,6BACG3B,EAAI4B,KAAI,SAACC,EAAcC,GAAf,OAA6B,6BAAaD,GAAJC,eChG1CC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.74b31e9b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.scss'\n\ndeclare const window: any\n\nfunction App () {\n  const [chainId, setChainId] = useState<number | null>(null)\n  const [log, setLog] = useState<string[]>([])\n\n  const networkName = chainId === 30 ? 'Mainnet' : 'Testnet'\n\n  const addNetwork = (params: any) =>\n    window.ethereum.request({ method: 'wallet_addEthereumChain', params })\n      .then(() => {\n        setLog([...log, `Switched to ${params[0].chainName} (${parseInt(params[0].chainId)})`])\n        setChainId(parseInt(params[0].chainId))\n      })\n      .catch((error: Error) => setLog([...log, `Error: ${error.message}`]))\n\n  const addRskTestnet = () =>\n    addNetwork([\n      {\n        chainId: '0x1f',\n        chainName: 'RSK Testnet',\n        nativeCurrency: {\n          name: 'Test RSK BTC',\n          symbol: 'tRBTC',\n          decimals: 18\n        },\n        rpcUrls: ['https://public-node.testnet.rsk.co'],\n        blockExplorerUrls: ['https://explorer.testnet.rsk.co']\n      }\n    ])\n\n  const addRskMainnet = () =>\n    addNetwork([\n      {\n        chainId: '0x1e',\n        chainName: 'RSK Mainnet',\n        nativeCurrency: {\n          name: 'RSK BTC',\n          symbol: 'RBTC',\n          decimals: 18\n        },\n        rpcUrls: ['https://public-node.rsk.co'],\n        blockExplorerUrls: ['https://explorer.rsk.co']\n      }\n    ])\n\n  const addToken = (params: any) =>\n    window.ethereum.request({ method: 'wallet_watchAsset', params })\n      .then(() => setLog([...log, 'Success, Token added!']))\n      .catch((error: Error) => setLog([...log, `Error: ${error.message}`]))\n\n  const addRifToken = () =>\n    addToken({\n      type: 'ERC20',\n      options: {\n        address: '0x2acc95758f8b5f583470ba265eb685a8f45fc9d5',\n        symbol: 'RIF',\n        decimals: 18,\n        image: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3701.png'\n      }\n    })\n\n  const addTestnetRifToken = () =>\n    addToken({\n      type: 'ERC20',\n      options: {\n        address: '0x19f64674d8a5b4e652319f5e239efd3bc969a1fe',\n        symbol: 'tRIF',\n        decimals: 18,\n        image: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3701.png'\n      }\n    })\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Add Testnet and Mainnet RSK to Metamask.\n      </header>\n\n      {chainId && (\n        <section>\n          <h2>Current Network</h2>\n          <p><strong>ChainId</strong> {chainId}</p>\n          <p><strong>Name</strong> {networkName}</p>\n        </section>\n      )}\n\n      <section>\n        <h2>Step 2:</h2>\n        <p>Click the buttons here to add the Mainnet or Testnet, or change to that network if you already have them configured!</p>\n\n        <button onClick={addRskMainnet}>Add RSK Mainnet</button>\n        <button onClick={addRskTestnet}>Add RSK Testnet</button>\n      </section>\n\n      {chainId && (\n        <section>\n          <h2>Step 3:</h2>\n          <p>Add the RIF token!</p>\n          <p>Click below to add the <strong>{networkName}</strong> RIF token.</p>\n          <button onClick={chainId === 30 ? addRifToken : addTestnetRifToken}>Add RIF Token</button>\n        </section>\n      )}\n\n      <section>\n        <h2>log</h2>\n        <ul>\n          {log.map((item: string, i: number) => <li key={i}>{item}</li>)}\n        </ul>\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}